name: Latest Release

# https://github.com/litestar-org/polyfactory/blob/main/.github/workflows/ci.yml
# https://github.com/litestar-org/advanced-alchemy/blob/main/.github/workflows/publish.yml
# https://github.com/litestar-org/litestar/blob/main/.github/workflows/publish.yml
# https://packaging.python.org/en/latest/guides/publishing-package-distribution-releases-using-github-actions-ci-cd-workflows/
# https://github.com/litestar-org/litestar/blob/main/.github/workflows/codeql.yml

on:
  push:
    branches:
      - 'main'
    tags:
      - 'v*'

#on:
#  release:
#    types: [published]
#  workflow_dispatch:

jobs:
  build:
    name: Build distribution 📦
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          allow-prereleases: false

      - uses: pdm-project/setup-pdm@v4
        name: Set up PDM
        with:
          python-version: "3.12"
          prerelease: false
          cache: true
          cache-dependency-path: |
            ./pdm.lock

      - name: Build package
        run: pdm run hatch version "${{ github.ref_name }}" && make build

      - name: Store the distribution packages
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

#  publish-test:
#    name: Publish to TestPyPI
#    runs-on: ubuntu-latest
#    if: startsWith(github.ref, 'refs/tags/')
#    needs:
#    - build
#
#    permissions:
#      id-token: write
#
#    environment:
#      name: testpypi
#      url: https://test.pypi.org/p/deps-injection
#
#    steps:
#    - name: Download all the dists
#      uses: actions/download-artifact@v4
#      with:
#        name: python-package-distributions
#        path: dist/
#
#    - name: Publish distribution 📦 to TestPyPI
#      uses: pypa/gh-action-pypi-publish@release/v1
#      with:
#        repository-url: https://test.pypi.org/legacy/

  publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs:
    - build

    permissions:
      id-token: write

    environment:
      name: pypi
      url: https://pypi.org/p/deps-injection

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

    - name: Publish distribution 📦 to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1

#  build-docs:
#    permissions:
#      contents: write
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v4
#
#      - uses: actions/setup-python@v5
#        with:
#          python-version: "3.12"
#
#      - uses: pdm-project/setup-pdm@v4
#        name: Set up PDM
#        with:
#          python-version: "3.12"
#          allow-python-prereleases: true
#          cache: true
#
#      - name: Build package
#        run: pdm build
#
#      - name: Install docs dependencies
#        run: pdm install -G:all
#
#      - name: Build docs
#        run: pdm run make docs
#
#      - name: Deploy
#        uses: JamesIves/github-pages-deploy-action@v4
#        with:
#          folder: docs/_build/html

  github-release:
    name: Sign the Python 🐍 distribution 📦 with Sigstore and upload them to GitHub Release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs:
#    - publish-test
    - publish

    permissions:
      contents: write
      id-token: write

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

    - name: Sign the dists with Sigstore
      uses: sigstore/gh-action-sigstore-python@v2.1.1
      with:
        inputs: >-
          ./dist/*.tar.gz
          ./dist/*.whl

    - name: Create GitHub Release
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: >-
        gh release create
        '${{ github.ref_name }}'
        --repo '${{ github.repository }}'
        --generate-notes""

    - name: Upload artifact signatures to GitHub Release
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: >-
        gh release upload
        '${{ github.ref_name }}' dist/**
        --repo '${{ github.repository }}'
